"use strict";(self.webpackChunk_callstack_byorg_docs=self.webpackChunk_callstack_byorg_docs||[]).push([["554"],{9877:function(e,n,r){r.r(n),r.d(n,{default:function(){return o}});var t=r(651),s=r(6971);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",div:"div",pre:"pre",code:"code",h2:"h2"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"references",children:["References",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#references",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"References provide information about the source of data retrieved by a tool call.\nWhen a tool call is triggered, you can add references to the context and later use these entries in a plugin to provide users with referenced pages or other relevant information. References are part of the context."}),"\n",(0,t.jsxs)(n.div,{className:"rspress-directive info",children:[(0,t.jsx)(n.div,{className:"rspress-directive-title",children:"INFO"}),(0,t.jsx)(n.div,{className:"rspress-directive-content",children:(0,t.jsx)(n.p,{children:"References are not automatically added for the AI. You need to implement this functionality if needed."})})]}),"\n",(0,t.jsx)(n.p,{children:"Let's create a tool that adds relevant weather information to the context."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"async function queryWeather(\n  params: { query: string },\n  context: RequestContext,\n): Promise<string> {\n  const { query } = params;\n  const { references } = context;\n\n  const userWeatherInfo = await getWeather(query);\n\n  references.addReference({\n    title: userWeatherInfo.title,\n    url: userWeatherInfo.url\n  });\n\n  return formatWeatherInfo(userWeatherInfo);\n}\n\nconst queryWeatherTool: ApplicationTool = {\n  name: 'query_weather',\n  description:\n    'Search weather data for requested city.',\n  parameters: z.object({\n    query: z.string().describe('City'),\n  }),\n  handler: queryWeather,\n};\n\nconst cityWeatherPlugin: ApplicationPlugin = {\n  name: 'weather-tool',\n  tools: [queryWeatherTool],\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this example, the AI receives information about the requested city, and the context includes information about the source of this data."}),"\n",(0,t.jsxs)(n.h2,{id:"using-references",children:["Using References",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#using-references",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"references"})," object provides two functions: ",(0,t.jsx)(n.code,{children:"getReferences"})," and ",(0,t.jsx)(n.code,{children:"addReference"}),".\nIf you want to present users with information about references, you need to manually add them to the response."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export const referencesPlugin: ApplicationPlugin = {\n  name: 'references',\n  middleware: async (context, next): Promise<MessageResponse> => {\n    // Continue middleware chain\n    const response = await next();\n\n    const references = context.references.getReferences();\n\n    return {\n      ...response,\n      content: `${response.content}${formatReferencesAnnotation(references)}`,\n    };\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"By using these functions, you can ensure that users are informed about the sources of the information they receive."})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}let o=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["docs%2Fcore%2Freferences.md"]={toc:[{text:"Using References",id:"using-references",depth:2}],title:"References",headingTitle:"References",frontmatter:{}}}}]);